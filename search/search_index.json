{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open-Source VXLAN/EVPN Configuration Labs This series of VXLAN/EVPN hands-on labs will help you master numerous aspects of VXLAN and EVPN platform of your choice 1 , including: Arista EOS Aruba AOS-CX Cisco Nexus OS Dell OS10 Juniper switches Nokia SR OS and SR Linux Vyatta VyOS A few labs are already waiting for you (with more coming soon ), but if this is your first visit to this site, you should start with the Installation and Setup documentation or run VXLAN/EVPN labs in GitHub codespaces . Configure VXLAN In these labs, you\u2019ll learn how to configure VXLAN with static ingress replication and use it to build VLANs, layer-3 segments, or VRF-Lite deployments: Extend a single VLAN segment with VXLAN The project has just started ; expect to see more labs in the near future. Some assembly required: while some virtual machines or containers are easy to download, you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Labs Overview"},{"location":"#open-source-vxlanevpn-configuration-labs","text":"This series of VXLAN/EVPN hands-on labs will help you master numerous aspects of VXLAN and EVPN platform of your choice 1 , including: Arista EOS Aruba AOS-CX Cisco Nexus OS Dell OS10 Juniper switches Nokia SR OS and SR Linux Vyatta VyOS A few labs are already waiting for you (with more coming soon ), but if this is your first visit to this site, you should start with the Installation and Setup documentation or run VXLAN/EVPN labs in GitHub codespaces .","title":"Open-Source VXLAN/EVPN Configuration Labs"},{"location":"#configure-vxlan","text":"In these labs, you\u2019ll learn how to configure VXLAN with static ingress replication and use it to build VLANs, layer-3 segments, or VRF-Lite deployments: Extend a single VLAN segment with VXLAN The project has just started ; expect to see more labs in the near future. Some assembly required: while some virtual machines or containers are easy to download, you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Configure VXLAN"},{"location":"1-setup/","text":"Software Installation and Lab Setup It\u2019s easiest to use the VXLAN/EVPN labs with netlab . While you can use most of them (with reduced functionality) with any other virtual or physical lab environment, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup section of the BGP Labs documentation. Warning EVPN labs work best with netlab release 25.10 or later (some lab exercises require a more recent netlab release). If you\u2019re using an earlier release, please upgrade with pip3 install --upgrade networklab . Select the Network Devices You Will Work With While I usually recommend FRRouting as the simplest-to-deploy network device, FRRouting does not include data-plane VLAN, VXLAN, or anycast gateway configuration. Configuring underlying Linux devices is too complex for an entry-level VXLAN/EVPN exercise; you\u2019ll be better off using one of the other platforms for which we implemented VXLAN and EVPN functionality. You can run Arista EOS in all netlab -supported virtualization environments (libvirt virtual machines or Docker containers), and if you want to start practicing VXLAN and EVPN with minimum hassle, consider using Arista EOS for all lab devices. While most network devices require an x86 CPU, you can run Arista cEOS or Nokia SR Linux containers on MacBooks with Apple silicon . Tip If you plan to run the labs in free GitHub Codespaces , you MUST use container-based network devices like Arista cEOS or Nokia SR Linux. Furthermore, the device cannot rely on the Linux VXLAN kernel module (FRRouting and VyOS do). Select the Additional Devices in Your Lab Some labs use additional switches \u2013 preconfigured devices with which your switches exchange EVPN routes. You won\u2019t configure those devices, but you might have to log into them and execute show commands. The default setup uses Arista EOS for additional switches; we also generated all the show printouts with Arista EOS. Alternatively, you can use any other device for which we implemented basic VXLAN and EVPN functionality. Additional limitations (should they exist) are listed under the Device Requirements section of individual lab exercises. Select the Virtualization Environment Now that you know which network device to use, check which virtualization environment you can use. Running VXLAN/EVPN labs in a free GitHub Codespace is an excellent starting point, but if you decide to build your own infrastructure, containerlab is easier to set up than libvirt . If you want to run the labs on your laptop (including Macs with Apple silicon ), create a Ubuntu VM to run netlab . You could also run them in a VM in a private or public cloud or invest in a tiny brick of densely packed silicon ( example ). Now for a few gotchas: Your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to run virtual machines on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using containers that run virtual machines within a container (the vrnetlab approach ). Software Installation Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Once you have completed the software installation, you have to deal with the stupidities of downloading and installing network device images ( libvirt , containers ) unless you decided to use Nokia SR Linux or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 1 . Fortunately, you only have to go through this colossal waste of time once. Setting Up the Labs We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the VXLAN/EVPN labs Clone the evpn GitHub repository with git clone https://github.com/bgplab/evpn.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: Change the directory to the top directory of the cloned repository 2 . Verify the current project defaults with the netlab defaults --project command: $ netlab defaults --project device = eos (project) groups.external.device = eos (project) provider = clab (project) If needed, change the project defaults to match your environment with the netlab defaults --project _setting_=_value_ command or edit the defaults.yml file with a text editor like vi or nano . For example, use these commands to change your devices to Cisco Nexus OS running as virtual machines 3 : $ netlab defaults --project device=nxos The default setting device is already set in project defaults Do you want to change that setting in project defaults [y/n]: y device set to nxos in /home/user/evpn/defaults.yml $ netlab defaults --project provider=libvirt The default setting provider is already set in netlab,project defaults Do you want to change that setting in project defaults [y/n]: y provider set to libvirt in /home/user/evpn/defaults.yml In a terminal window, change the current directory to one of the lab directories (for example, basic/1-single ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9 evpn if you used the simple version of the git clone command \u21a9 Assuming you built the Nexus OS Vagrant box first \u21a9","title":"Installation and Setup"},{"location":"1-setup/#software-installation-and-lab-setup","text":"It\u2019s easiest to use the VXLAN/EVPN labs with netlab . While you can use most of them (with reduced functionality) with any other virtual or physical lab environment, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup section of the BGP Labs documentation. Warning EVPN labs work best with netlab release 25.10 or later (some lab exercises require a more recent netlab release). If you\u2019re using an earlier release, please upgrade with pip3 install --upgrade networklab .","title":"Software Installation and Lab Setup"},{"location":"1-setup/#devs","text":"While I usually recommend FRRouting as the simplest-to-deploy network device, FRRouting does not include data-plane VLAN, VXLAN, or anycast gateway configuration. Configuring underlying Linux devices is too complex for an entry-level VXLAN/EVPN exercise; you\u2019ll be better off using one of the other platforms for which we implemented VXLAN and EVPN functionality. You can run Arista EOS in all netlab -supported virtualization environments (libvirt virtual machines or Docker containers), and if you want to start practicing VXLAN and EVPN with minimum hassle, consider using Arista EOS for all lab devices. While most network devices require an x86 CPU, you can run Arista cEOS or Nokia SR Linux containers on MacBooks with Apple silicon . Tip If you plan to run the labs in free GitHub Codespaces , you MUST use container-based network devices like Arista cEOS or Nokia SR Linux. Furthermore, the device cannot rely on the Linux VXLAN kernel module (FRRouting and VyOS do).","title":"Select the Network Devices You Will Work With"},{"location":"1-setup/#extradev","text":"Some labs use additional switches \u2013 preconfigured devices with which your switches exchange EVPN routes. You won\u2019t configure those devices, but you might have to log into them and execute show commands. The default setup uses Arista EOS for additional switches; we also generated all the show printouts with Arista EOS. Alternatively, you can use any other device for which we implemented basic VXLAN and EVPN functionality. Additional limitations (should they exist) are listed under the Device Requirements section of individual lab exercises.","title":"Select the Additional Devices in Your Lab"},{"location":"1-setup/#select-the-virtualization-environment","text":"Now that you know which network device to use, check which virtualization environment you can use. Running VXLAN/EVPN labs in a free GitHub Codespace is an excellent starting point, but if you decide to build your own infrastructure, containerlab is easier to set up than libvirt . If you want to run the labs on your laptop (including Macs with Apple silicon ), create a Ubuntu VM to run netlab . You could also run them in a VM in a private or public cloud or invest in a tiny brick of densely packed silicon ( example ). Now for a few gotchas: Your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to run virtual machines on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using containers that run virtual machines within a container (the vrnetlab approach ).","title":"Select the Virtualization Environment"},{"location":"1-setup/#software-installation","text":"Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Once you have completed the software installation, you have to deal with the stupidities of downloading and installing network device images ( libvirt , containers ) unless you decided to use Nokia SR Linux or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 1 . Fortunately, you only have to go through this colossal waste of time once.","title":"Software Installation"},{"location":"1-setup/#defaults","text":"We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the VXLAN/EVPN labs Clone the evpn GitHub repository with git clone https://github.com/bgplab/evpn.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: Change the directory to the top directory of the cloned repository 2 . Verify the current project defaults with the netlab defaults --project command: $ netlab defaults --project device = eos (project) groups.external.device = eos (project) provider = clab (project) If needed, change the project defaults to match your environment with the netlab defaults --project _setting_=_value_ command or edit the defaults.yml file with a text editor like vi or nano . For example, use these commands to change your devices to Cisco Nexus OS running as virtual machines 3 : $ netlab defaults --project device=nxos The default setting device is already set in project defaults Do you want to change that setting in project defaults [y/n]: y device set to nxos in /home/user/evpn/defaults.yml $ netlab defaults --project provider=libvirt The default setting provider is already set in netlab,project defaults Do you want to change that setting in project defaults [y/n]: y provider set to libvirt in /home/user/evpn/defaults.yml In a terminal window, change the current directory to one of the lab directories (for example, basic/1-single ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9 evpn if you used the simple version of the git clone command \u21a9 Assuming you built the Nexus OS Vagrant box first \u21a9","title":"Setting Up the Labs"},{"location":"3-upcoming/","text":"Upcoming Labs You can already get your hands dirty with the first VXLAN labs labs while we keep working on these ideas: VXLAN Multiple VXLAN segments Routing between VXLAN segments Anycast gateways Implementing VRF-Lite with VXLAN Basic EVPN Setup Simple layer-2 VXLAN-based segment Multiple VXLAN-based segments Routing between EVPN-controlled VXLAN segments Asymmetric routing and bridging Symmetric routing and bridging with transit VNI Anycast gateways EVPN Designs IBGP with OSPF EBGP-only design Multi-pod EVPN design Complex Scenarios Using EVPN to implement L3VPN service Layer-2 Common Services VPN","title":"Upcoming Labs"},{"location":"3-upcoming/#upcoming-labs","text":"You can already get your hands dirty with the first VXLAN labs labs while we keep working on these ideas:","title":"Upcoming Labs"},{"location":"3-upcoming/#vxlan","text":"Multiple VXLAN segments Routing between VXLAN segments Anycast gateways Implementing VRF-Lite with VXLAN","title":"VXLAN"},{"location":"3-upcoming/#basic-evpn-setup","text":"Simple layer-2 VXLAN-based segment Multiple VXLAN-based segments Routing between EVPN-controlled VXLAN segments Asymmetric routing and bridging Symmetric routing and bridging with transit VNI Anycast gateways","title":"Basic EVPN Setup"},{"location":"3-upcoming/#evpn-designs","text":"IBGP with OSPF EBGP-only design Multi-pod EVPN design","title":"EVPN Designs"},{"location":"3-upcoming/#complex-scenarios","text":"Using EVPN to implement L3VPN service Layer-2 Common Services VPN","title":"Complex Scenarios"},{"location":"4-codespaces/","text":"Use GitHub Codespaces You can run VXLAN/EVPN labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your VXLAN/EVPN labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VS Code (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal. Select Lab Devices GitHub Codespaces can run only \u201ctrue\u201d containers (not virtual machines packaged as containers) and cannot load additional Linux kernel modules. You can thus choose only between Arista cEOS and Nokia SR Linux containers (FRRouting and VyOS containers require the VXLAN kernel module). The VXLAN/EVPN labs repository uses Arista cEOS containers as the default device. You can change that with the netlab defaults --project device=_value_ command executed in the top directory (where the terminal window opens) or edit the defaults.yml file with a text editor like vi or nano . For example, the following command changes the user lab devices to SR Linux (the only other device you can use as a VXLAN/EVPN switch with GitHub Codespaces): $ netlab defaults --project device=srlinux The default setting device is already set in project defaults Do you want to change that setting in project defaults [y/n]: y device set to srlinux in /home/user/evpn/defaults.yml Notes: You will have to download the Arista cEOS container (registration required) and copy it into your GitHub codespace . Nokia SR Linux container is published in a public repository and can be downloaded automatically. Start a Lab Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane. Cleanup and Shutdown Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#use-github-codespaces","text":"You can run VXLAN/EVPN labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your VXLAN/EVPN labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VS Code (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal.","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#select-lab-devices","text":"GitHub Codespaces can run only \u201ctrue\u201d containers (not virtual machines packaged as containers) and cannot load additional Linux kernel modules. You can thus choose only between Arista cEOS and Nokia SR Linux containers (FRRouting and VyOS containers require the VXLAN kernel module). The VXLAN/EVPN labs repository uses Arista cEOS containers as the default device. You can change that with the netlab defaults --project device=_value_ command executed in the top directory (where the terminal window opens) or edit the defaults.yml file with a text editor like vi or nano . For example, the following command changes the user lab devices to SR Linux (the only other device you can use as a VXLAN/EVPN switch with GitHub Codespaces): $ netlab defaults --project device=srlinux The default setting device is already set in project defaults Do you want to change that setting in project defaults [y/n]: y device set to srlinux in /home/user/evpn/defaults.yml Notes: You will have to download the Arista cEOS container (registration required) and copy it into your GitHub codespace . Nokia SR Linux container is published in a public repository and can be downloaded automatically.","title":"Select Lab Devices"},{"location":"4-codespaces/#start-a-lab","text":"Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane.","title":"Start a Lab"},{"location":"4-codespaces/#cleanup-and-shutdown","text":"Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Cleanup and Shutdown"},{"location":"99-about/","text":"About the Project In 2023, I started the Open-Source BGP Labs project to recreate the labs I created in the early 1990s. As I posted a status update a year later , Henk Smit suggested I do the same for IS-IS . Those two projects were largely complete in late 2025, and it was time for another one. VXLAN/EVPN seemed like a no-brainer; welcome to the Open-Source VXLAN/EVPN Configuration Labs project. The project uses netlab 1 to set up the labs. You can use whatever networking devices you wish to work on, and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 2 . Some lab exercises use additional (external) VXLAN/EVPN devices. We tested the labs with Arista EOS switches; you could also choose a few other devices . You\u2019ll find the lab topology files in a GitHub repository , but you might explore the lab exercises first . As always, everything starts with a long wish list . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS or some Junos variants. \u21a9","title":"About the Project"},{"location":"99-about/#about-the-project","text":"In 2023, I started the Open-Source BGP Labs project to recreate the labs I created in the early 1990s. As I posted a status update a year later , Henk Smit suggested I do the same for IS-IS . Those two projects were largely complete in late 2025, and it was time for another one. VXLAN/EVPN seemed like a no-brainer; welcome to the Open-Source VXLAN/EVPN Configuration Labs project. The project uses netlab 1 to set up the labs. You can use whatever networking devices you wish to work on, and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 2 . Some lab exercises use additional (external) VXLAN/EVPN devices. We tested the labs with Arista EOS switches; you could also choose a few other devices . You\u2019ll find the lab topology files in a GitHub repository , but you might explore the lab exercises first . As always, everything starts with a long wish list . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS or some Junos variants. \u21a9","title":"About the Project"}]}