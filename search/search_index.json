{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open-Source VXLAN/EVPN Configuration Labs This series of VXLAN/EVPN hands-on labs will help you master numerous aspects of VXLAN and EVPN on a platform of your choice 1 , including: Arista EOS Aruba AOS-CX Cisco Nexus OS Dell OS10 Juniper switches Nokia SR OS and SR Linux Vyatta VyOS A few labs are already waiting for you (with more coming soon ), but if this is your first visit to this site, you should start with the Installation and Setup documentation or run VXLAN/EVPN labs in GitHub codespaces . Configure VXLAN In these labs, you\u2019ll learn how to configure VXLAN with static ingress replication and use it to build VLANs, layer-3 segments, or VRF-Lite deployments: Extend a single VLAN segment with VXLAN More Complex VXLAN Deployment Scenario Routing between VXLAN segments (coming soon) Anycast gateways (coming soon) Implementing VRF-Lite with VXLAN (coming soon) The project has just started ; expect to see more labs in the near future. Some assembly required: while some virtual machines or containers are easy to download, you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Labs Overview"},{"location":"#open-source-vxlanevpn-configuration-labs","text":"This series of VXLAN/EVPN hands-on labs will help you master numerous aspects of VXLAN and EVPN on a platform of your choice 1 , including: Arista EOS Aruba AOS-CX Cisco Nexus OS Dell OS10 Juniper switches Nokia SR OS and SR Linux Vyatta VyOS A few labs are already waiting for you (with more coming soon ), but if this is your first visit to this site, you should start with the Installation and Setup documentation or run VXLAN/EVPN labs in GitHub codespaces .","title":"Open-Source VXLAN/EVPN Configuration Labs"},{"location":"#vxlan","text":"In these labs, you\u2019ll learn how to configure VXLAN with static ingress replication and use it to build VLANs, layer-3 segments, or VRF-Lite deployments: Extend a single VLAN segment with VXLAN More Complex VXLAN Deployment Scenario Routing between VXLAN segments (coming soon) Anycast gateways (coming soon) Implementing VRF-Lite with VXLAN (coming soon) The project has just started ; expect to see more labs in the near future. Some assembly required: while some virtual machines or containers are easy to download, you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Configure VXLAN"},{"location":"1-setup/","text":"Software Installation and Lab Setup It\u2019s easiest to use the VXLAN/EVPN labs with netlab . While you can use most of them (with reduced functionality) with any other virtual or physical lab environment, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup section of the BGP Labs documentation. Warning EVPN labs work best with netlab release 25.10 or later (some lab exercises require a more recent netlab release). If you\u2019re using an earlier release, please upgrade with pip3 install --upgrade networklab . Select the Network Devices You Will Work With While I usually recommend FRRouting as the simplest-to-deploy network device, FRRouting does not include data-plane VLAN, VXLAN, or anycast gateway configuration. Configuring underlying Linux devices is too complex for an entry-level VXLAN/EVPN exercise; you\u2019ll be better off using one of the other platforms for which we implemented VXLAN and EVPN functionality. You can run Arista EOS in all netlab -supported virtualization environments (libvirt virtual machines or Docker containers), and if you want to start practicing VXLAN and EVPN with minimum hassle, consider using Arista EOS for all lab devices. While most network devices require an x86 CPU, you can run Arista cEOS or Nokia SR Linux containers on MacBooks with Apple silicon . Tip If you plan to run the labs in free GitHub Codespaces , you MUST use container-based network devices like Arista cEOS or Nokia SR Linux. Furthermore, the device cannot rely on the Linux VXLAN kernel module (FRRouting and VyOS do). Select the Additional Devices in Your Lab Some labs use additional switches \u2013 preconfigured devices with which your switches exchange EVPN routes. You won\u2019t configure those devices, but you might have to log into them and execute show commands. The default setup uses Arista EOS for additional switches; we also generated all the show printouts with Arista EOS. Alternatively, you can use any other device for which we implemented basic VXLAN and EVPN functionality. Additional limitations (should they exist) are listed under the Device Requirements section of individual lab exercises. Select the Virtualization Environment Now that you know which network device to use, check which virtualization environment you can use. Running VXLAN/EVPN labs in a free GitHub Codespace is an excellent starting point, but if you decide to build your own infrastructure, containerlab is easier to set up than libvirt . If you want to run the labs on your laptop (including Macs with Apple silicon ), create a Ubuntu VM to run netlab . You could also run them in a VM in a private or public cloud or invest in a tiny brick of densely packed silicon ( example ). Now for a few gotchas: Your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to run virtual machines on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using containers that run virtual machines within a container (the vrnetlab approach ). Software Installation Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Once you have completed the software installation, you have to deal with the stupidities of downloading and installing network device images ( libvirt , containers ) unless you decided to use Nokia SR Linux or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 1 . Fortunately, you only have to go through this colossal waste of time once. Setting Up the Labs We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the VXLAN/EVPN labs Clone the evpn GitHub repository with git clone https://github.com/bgplab/evpn.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: Change the directory to the top directory of the cloned repository 2 . Verify the current project defaults with the netlab defaults --project command: $ netlab defaults --project device = eos (project) groups.external.device = eos (project) provider = clab (project) If needed, change the project defaults to match your environment with the netlab defaults --project _setting_=_value_ command or edit the defaults.yml file with a text editor like vi or nano . For example, use these commands to change your devices to Cisco Nexus OS running as virtual machines 3 : $ netlab defaults --project device=nxos The default setting device is already set in project defaults Do you want to change that setting in project defaults [y/n]: y device set to nxos in /home/user/evpn/defaults.yml $ netlab defaults --project provider=libvirt The default setting provider is already set in netlab,project defaults Do you want to change that setting in project defaults [y/n]: y provider set to libvirt in /home/user/evpn/defaults.yml In a terminal window, change the current directory to one of the lab directories (for example, basic/1-single ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9 evpn if you used the simple version of the git clone command \u21a9 Assuming you built the Nexus OS Vagrant box first \u21a9","title":"Installation and Setup"},{"location":"1-setup/#software-installation-and-lab-setup","text":"It\u2019s easiest to use the VXLAN/EVPN labs with netlab . While you can use most of them (with reduced functionality) with any other virtual or physical lab environment, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup section of the BGP Labs documentation. Warning EVPN labs work best with netlab release 25.10 or later (some lab exercises require a more recent netlab release). If you\u2019re using an earlier release, please upgrade with pip3 install --upgrade networklab .","title":"Software Installation and Lab Setup"},{"location":"1-setup/#devs","text":"While I usually recommend FRRouting as the simplest-to-deploy network device, FRRouting does not include data-plane VLAN, VXLAN, or anycast gateway configuration. Configuring underlying Linux devices is too complex for an entry-level VXLAN/EVPN exercise; you\u2019ll be better off using one of the other platforms for which we implemented VXLAN and EVPN functionality. You can run Arista EOS in all netlab -supported virtualization environments (libvirt virtual machines or Docker containers), and if you want to start practicing VXLAN and EVPN with minimum hassle, consider using Arista EOS for all lab devices. While most network devices require an x86 CPU, you can run Arista cEOS or Nokia SR Linux containers on MacBooks with Apple silicon . Tip If you plan to run the labs in free GitHub Codespaces , you MUST use container-based network devices like Arista cEOS or Nokia SR Linux. Furthermore, the device cannot rely on the Linux VXLAN kernel module (FRRouting and VyOS do).","title":"Select the Network Devices You Will Work With"},{"location":"1-setup/#extradev","text":"Some labs use additional switches \u2013 preconfigured devices with which your switches exchange EVPN routes. You won\u2019t configure those devices, but you might have to log into them and execute show commands. The default setup uses Arista EOS for additional switches; we also generated all the show printouts with Arista EOS. Alternatively, you can use any other device for which we implemented basic VXLAN and EVPN functionality. Additional limitations (should they exist) are listed under the Device Requirements section of individual lab exercises.","title":"Select the Additional Devices in Your Lab"},{"location":"1-setup/#select-the-virtualization-environment","text":"Now that you know which network device to use, check which virtualization environment you can use. Running VXLAN/EVPN labs in a free GitHub Codespace is an excellent starting point, but if you decide to build your own infrastructure, containerlab is easier to set up than libvirt . If you want to run the labs on your laptop (including Macs with Apple silicon ), create a Ubuntu VM to run netlab . You could also run them in a VM in a private or public cloud or invest in a tiny brick of densely packed silicon ( example ). Now for a few gotchas: Your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to run virtual machines on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using containers that run virtual machines within a container (the vrnetlab approach ).","title":"Select the Virtualization Environment"},{"location":"1-setup/#software-installation","text":"Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Once you have completed the software installation, you have to deal with the stupidities of downloading and installing network device images ( libvirt , containers ) unless you decided to use Nokia SR Linux or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 1 . Fortunately, you only have to go through this colossal waste of time once.","title":"Software Installation"},{"location":"1-setup/#defaults","text":"We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the VXLAN/EVPN labs Clone the evpn GitHub repository with git clone https://github.com/bgplab/evpn.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: Change the directory to the top directory of the cloned repository 2 . Verify the current project defaults with the netlab defaults --project command: $ netlab defaults --project device = eos (project) groups.external.device = eos (project) provider = clab (project) If needed, change the project defaults to match your environment with the netlab defaults --project _setting_=_value_ command or edit the defaults.yml file with a text editor like vi or nano . For example, use these commands to change your devices to Cisco Nexus OS running as virtual machines 3 : $ netlab defaults --project device=nxos The default setting device is already set in project defaults Do you want to change that setting in project defaults [y/n]: y device set to nxos in /home/user/evpn/defaults.yml $ netlab defaults --project provider=libvirt The default setting provider is already set in netlab,project defaults Do you want to change that setting in project defaults [y/n]: y provider set to libvirt in /home/user/evpn/defaults.yml In a terminal window, change the current directory to one of the lab directories (for example, basic/1-single ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9 evpn if you used the simple version of the git clone command \u21a9 Assuming you built the Nexus OS Vagrant box first \u21a9","title":"Setting Up the Labs"},{"location":"3-upcoming/","text":"Upcoming Labs You can already get your hands dirty with the first VXLAN labs labs while we keep working on these ideas: VXLAN Routing between VXLAN segments Anycast gateways Implementing VRF-Lite with VXLAN Basic EVPN Setup Simple layer-2 VXLAN-based segment Multiple VXLAN-based segments Routing between EVPN-controlled VXLAN segments Asymmetric routing and bridging Symmetric routing and bridging with transit VNI Anycast gateways EVPN Designs IBGP with OSPF EBGP-only design Multi-pod EVPN design Complex Scenarios Using EVPN to implement L3VPN service Layer-2 Common Services VPN","title":"Upcoming Labs"},{"location":"3-upcoming/#upcoming-labs","text":"You can already get your hands dirty with the first VXLAN labs labs while we keep working on these ideas:","title":"Upcoming Labs"},{"location":"3-upcoming/#vxlan","text":"Routing between VXLAN segments Anycast gateways Implementing VRF-Lite with VXLAN","title":"VXLAN"},{"location":"3-upcoming/#basic-evpn-setup","text":"Simple layer-2 VXLAN-based segment Multiple VXLAN-based segments Routing between EVPN-controlled VXLAN segments Asymmetric routing and bridging Symmetric routing and bridging with transit VNI Anycast gateways","title":"Basic EVPN Setup"},{"location":"3-upcoming/#evpn-designs","text":"IBGP with OSPF EBGP-only design Multi-pod EVPN design","title":"EVPN Designs"},{"location":"3-upcoming/#complex-scenarios","text":"Using EVPN to implement L3VPN service Layer-2 Common Services VPN","title":"Complex Scenarios"},{"location":"4-codespaces/","text":"Use GitHub Codespaces You can run VXLAN/EVPN labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your VXLAN/EVPN labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VS Code (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal. Select Lab Devices GitHub Codespaces can run only \u201ctrue\u201d containers (not virtual machines packaged as containers) and cannot load additional Linux kernel modules. You can thus choose only between Arista cEOS and Nokia SR Linux containers (FRRouting and VyOS containers require the VXLAN kernel module). The VXLAN/EVPN labs repository uses Arista cEOS containers as the default device. You can change that with the netlab defaults --project device=_value_ command executed in the top directory (where the terminal window opens) or edit the defaults.yml file with a text editor like vi or nano . For example, the following command changes the user lab devices to SR Linux (the only other device you can use as a VXLAN/EVPN switch with GitHub Codespaces): $ netlab defaults --project device=srlinux The default setting device is already set in project defaults Do you want to change that setting in project defaults [y/n]: y device set to srlinux in /home/user/evpn/defaults.yml Notes: You will have to download the Arista cEOS container (registration required) and copy it into your GitHub codespace . Nokia SR Linux container is published in a public repository and can be downloaded automatically. Start a Lab Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane. Cleanup and Shutdown Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#use-github-codespaces","text":"You can run VXLAN/EVPN labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your VXLAN/EVPN labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VS Code (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal.","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#select-lab-devices","text":"GitHub Codespaces can run only \u201ctrue\u201d containers (not virtual machines packaged as containers) and cannot load additional Linux kernel modules. You can thus choose only between Arista cEOS and Nokia SR Linux containers (FRRouting and VyOS containers require the VXLAN kernel module). The VXLAN/EVPN labs repository uses Arista cEOS containers as the default device. You can change that with the netlab defaults --project device=_value_ command executed in the top directory (where the terminal window opens) or edit the defaults.yml file with a text editor like vi or nano . For example, the following command changes the user lab devices to SR Linux (the only other device you can use as a VXLAN/EVPN switch with GitHub Codespaces): $ netlab defaults --project device=srlinux The default setting device is already set in project defaults Do you want to change that setting in project defaults [y/n]: y device set to srlinux in /home/user/evpn/defaults.yml Notes: You will have to download the Arista cEOS container (registration required) and copy it into your GitHub codespace . Nokia SR Linux container is published in a public repository and can be downloaded automatically.","title":"Select Lab Devices"},{"location":"4-codespaces/#start-a-lab","text":"Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane.","title":"Start a Lab"},{"location":"4-codespaces/#cleanup-and-shutdown","text":"Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Cleanup and Shutdown"},{"location":"99-about/","text":"About the Project In 2023, I started the Open-Source BGP Labs project to recreate the labs I created in the early 1990s. As I posted a status update a year later , Henk Smit suggested I do the same for IS-IS . Those two projects were largely complete in late 2025, and it was time for another one. VXLAN/EVPN seemed like a no-brainer; welcome to the Open-Source VXLAN/EVPN Configuration Labs project. The project uses netlab 1 to set up the labs. You can use whatever networking devices you wish to work on, and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 2 . Some lab exercises use additional (external) VXLAN/EVPN devices. We tested the labs with Arista EOS switches; you could also choose a few other devices . You\u2019ll find the lab topology files in a GitHub repository , but you might explore the lab exercises first . As always, everything starts with a long wish list . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS or some Junos variants. \u21a9","title":"About the Project"},{"location":"99-about/#about-the-project","text":"In 2023, I started the Open-Source BGP Labs project to recreate the labs I created in the early 1990s. As I posted a status update a year later , Henk Smit suggested I do the same for IS-IS . Those two projects were largely complete in late 2025, and it was time for another one. VXLAN/EVPN seemed like a no-brainer; welcome to the Open-Source VXLAN/EVPN Configuration Labs project. The project uses netlab 1 to set up the labs. You can use whatever networking devices you wish to work on, and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 2 . Some lab exercises use additional (external) VXLAN/EVPN devices. We tested the labs with Arista EOS switches; you could also choose a few other devices . You\u2019ll find the lab topology files in a GitHub repository , but you might explore the lab exercises first . As always, everything starts with a long wish list . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS or some Junos variants. \u21a9","title":"About the Project"},{"location":"vxlan/1-single/","text":"Extend a Single VLAN Segment with VXLAN VXLAN is a data-plane-only technology that encapsulates Ethernet frames in UDP packets (using the VXLAN header defined in the RFC 7348 as the shim between the two). In this lab exercise, you\u2019ll use VXLAN ( overlay network) to extend a single VLAN across an IP-only backbone ( underlay network): Device Requirements You can use any device supported by the netlab OSPF and VLAN configuration modules. The device should support VXLAN with static ingress replication. Start the Lab Assuming you already set up your lab infrastructure : Change directory to vxlan/1-single Execute netlab up Log into lab devices with netlab connect and verify that the IP addresses and the OSPF are properly configured. Existing Device Configuration The switches in your lab (S1 and S2) are preconfigured with a tenant VLAN with VLAN tag 100. IPv4 addresses are configured on Linux hosts, switch loopback interfaces, and the interswitch link ( details ). The switches run OSPF in area 0 across the interswitch link ( details ). Configuration Tasks Configuring VXLAN on a switch is usually a multi-step process: Configure a VXLAN interface ( Vxlan1 on Arista EOS) and assign a local VTEP address (or source interface) to it. You\u2019ll use the loopback IPv4 address as the VTEP address. Optionally, set the VXLAN destination UDP port (the standard IANA-allocated VXLAN UDP port is 4789) To extend a VLAN across an underlay network with VXLAN, you have to: Map a local VLAN to a VXLAN Virtual Network Identifier (VNI) 1 . Arista EOS does the mapping within the VXLAN interface configuration. Configure a flood list (a list of remote VTEPs) for a VXLAN-enabled VLAN or VNI. The flood list is used to propagate copies of Ethernet BUM (Broadcast, Unknown unicast, Multicast) packets to all other VTEPs participating in the same VXLAN segment. The flood list is also configured within the VXLAN interface configuration on Arista EOS. The underlay network should be able to transport 1500-byte overlay IP packets. You should therefore increase the IP MTU size on the underlay links to at least 1550 bytes 2 due to VXLAN encapsulation overhead: 14 bytes for the Ethernet header 8 bytes for the VXLAN header 8 bytes for the UDP header 20 bytes for the outer IPv4 header Verification Try to ping h2 from h1: $ netlab connect h1 ping h2 Connecting to container clab-single-h1, executing ping h2 PING h2 (172.16.0.4): 56 data bytes 64 bytes from 172.16.0.4: seq=0 ttl=64 time=5.273 ms 64 bytes from 172.16.0.4: seq=1 ttl=64 time=2.048 ms ^C --- h2 ping statistics --- 2 packets transmitted, 2 packets received, 0% packet loss round-trip min/avg/max = 2.048/3.660/5.273 ms If that ping succeeds, try pinging with the 1500-byte IPv4 packets. The -s parameter of the Linux ping command specifies the payload size. The maximum payload that can fit into a 1500-byte packet is 1472 bytes due to the ICMP header (8 bytes) and the IP header (20 bytes). $ netlab connect h1 Connecting to container clab-single-h1, starting bash h1:/# ping h2 -s 1472 PING h2 (172.16.0.4): 1472 data bytes 1480 bytes from 172.16.0.4: seq=0 ttl=64 time=5.362 ms 1480 bytes from 172.16.0.4: seq=1 ttl=64 time=2.604 ms 1480 bytes from 172.16.0.4: seq=2 ttl=64 time=2.563 ms ^C --- h2 ping statistics --- 3 packets transmitted, 3 packets received, 0% packet loss round-trip min/avg/max = 2.563/3.509/5.362 ms You forgot to change the MTU size on the underlay links if the simple ping succeeds, but the large-packet ping fails. Done? Continue to More Complex VXLAN Deployment Scenario . Troubleshooting Use these troubleshooting steps if the Linux host can\u2019t communicate over the stretched VLAN segment: Note The troubleshooting instructions use Arista EOS show commands and corresponding printouts. You\u2019ll have to find matching commands if you use some other platform. Verify OSPF connectivity between S1 and S2: s1#show ip ospf neighbor Neighbor ID Instance VRF Pri State Dead Time Address Interface 10.0.0.2 1 default 0 FULL 00:00:38 10.1.0.2 Ethernet1 Verify that S1 and S2 have routes to both loopback interfaces in their routing tables s1#show ip route ... Gateway of last resort is not set C 10.0.0.1/32 directly connected, Loopback0 O 10.0.0.2/32 [110/20] via 10.1.0.2, Ethernet1 C 10.1.0.0/30 directly connected, Ethernet1 Verify that S1 and S2 can ping each other\u2019s loopback interfaces from the source IPv4 address of the local loopback interface : s1#ping 10.0.0.2 source 10.0.0.1 PING 10.0.0.2 (10.0.0.2) from 10.0.0.1 : 72(100) bytes of data. 80 bytes from 10.0.0.2: icmp_seq=1 ttl=64 time=0.096 ms 80 bytes from 10.0.0.2: icmp_seq=2 ttl=64 time=0.007 ms 80 bytes from 10.0.0.2: icmp_seq=3 ttl=64 time=0.004 ms 80 bytes from 10.0.0.2: icmp_seq=4 ttl=64 time=0.005 ms 80 bytes from 10.0.0.2: icmp_seq=5 ttl=64 time=0.009 ms --- 10.0.0.2 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 0.004/0.024/0.096/0.035 ms, ipg/ewma 0.038/0.059 ms If you have gotten this far, your underlay network works correctly. Next, let\u2019s check the VXLAN configuration: The show vxlan vni command displays VLAN-to-VXLAN mapping. Check that you correctly mapped VLAN 100 to a VXLAN VNI and used the same VNI on S1 and S2. s1#show vxlan vni VNI to VLAN Mapping for Vxlan1 VNI VLAN Source Interface 802.1Q Tag ------------ ---------- ------------ --------------- ---------- 100100 100 static Ethernet2 untagged Vxlan1 100 The show vxlan vtep command displays remote VTEPs (ingress replication flood list). Check that you configured the remote VTEP loopback IP address in the flood list for your VNI: s1#show vxlan vtep Remote VTEPS for Vxlan1: VTEP Tunnel Type(s) -------------- -------------- 10.0.0.2 unicast, flood Total number of remote VTEPS: 1 You can also use the show vxlan flood vtep command to display the same information in a slightly different format. s1#show vxlan flood vtep VXLAN Flood VTEP Table -------------------------------------------------------------------------------- VLANS Ip Address ----------------------------- ------------------------------------------------ 100 10.0.0.2 End-to-end VXLAN should work if all the above printouts seem correct. However, you might also want to check the VLAN ports with the show vlan command and the spanning tree status with the show spanning-tree command. s1#show vlan VLAN Name Status Ports ----- -------------------------------- --------- ------------------------------- 1 default active 100 tenant active Cpu, Et2, Vx1 s1#show spanning-tree MST0 Spanning tree enabled protocol mstp Root ID Priority 32768 Address 001c.73a5.db35 This bridge is the root Bridge ID Priority 32768 (priority 32768 sys-id-ext 0) Address 001c.73a5.db35 Hello Time 2.000 sec Max Age 20 sec Forward Delay 15 sec Interface Role State Cost Prio.Nbr Type ---------------- ---------- ---------- --------- -------- -------------------- Et2 designated forwarding 20000 128.2 P2p Edge Finally, the show vxlan address-table command displays MAC addresses learned from the incoming VXLAN packets, while the show mac address-table command displays MAC addresses learned from local interfaces and incoming VXLAN packets: s1#show vxlan address-table Vxlan Mac Address Table ---------------------------------------------------------------------- VLAN Mac Address Type Prt VTEP Moves Last Move ---- ----------- ---- --- ---- ----- --------- 100 aac1.ab87.58b8 DYNAMIC Vx1 10.0.0.2 1 0:00:05 ago Total Remote Mac Addresses for this criterion: 1 s1#show mac address-table Mac Address Table ------------------------------------------------------------------ Vlan Mac Address Type Ports Moves Last Move ---- ----------- ---- ----- ----- --------- 100 aac1.ab87.58b8 DYNAMIC Vx1 1 0:00:43 ago 100 aac1.abc4.959e DYNAMIC Et2 1 0:00:43 ago Total Mac Addresses for this criterion: 2 If everything else fails, read the Arista EOS VXLAN Troubleshooting Guidebook or the corresponding documentation for your platform. Figured out what you did wrong? Continue to More Complex VXLAN Deployment Scenario . Cheating Shut down your lab with the netlab down command Start the lab from the solution.yml topology with the netlab up solution.yml command Explore the S1/S2 device configuration Remembered the commands to configure VXLAN? Practice them in the More Complex VXLAN Deployment Scenario exercise. Reference Information Lab Wiring Origin Device Origin Port Destination Device Destination Port s1 Ethernet1 s2 Ethernet1 h1 eth1 s1 Ethernet2 h2 eth1 s2 Ethernet2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description s1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 s1 -> s2 Ethernet2 [Access VLAN tenant] s1 -> h1 Vlan100 VLAN tenant (100) -> [h1,h2,s2] s2 10.0.0.2/32 Loopback Ethernet1 10.1.0.2/30 s2 -> s1 Ethernet2 [Access VLAN tenant] s2 -> h2 Vlan100 VLAN tenant (100) -> [h1,s1,h2] h1 eth1 172.16.0.3/24 h1 -> [s1,h2,s2] h2 eth1 172.16.0.4/24 h2 -> [h1,s1,s2] OSPF Routing (Area 0) Router Interface IPv4 Address Neighbor(s) s1 Loopback 10.0.0.1/32 Ethernet1 10.1.0.1/30 s2 s2 Loopback 10.0.0.2/32 Ethernet1 10.1.0.2/30 s1 The VNI must match across VTEPs; the local VLAN tag does not have to. \u21a9 Setting the IPv4 MTU on the underlay links to 1560 bytes is safer as it allows for one or two levels of VLAN tags in the encapsulated Ethernet frames. \u21a9","title":"Extend a Single VLAN Segment with VXLAN"},{"location":"vxlan/1-single/#extend-a-single-vlan-segment-with-vxlan","text":"VXLAN is a data-plane-only technology that encapsulates Ethernet frames in UDP packets (using the VXLAN header defined in the RFC 7348 as the shim between the two). In this lab exercise, you\u2019ll use VXLAN ( overlay network) to extend a single VLAN across an IP-only backbone ( underlay network):","title":"Extend a Single VLAN Segment with VXLAN"},{"location":"vxlan/1-single/#req","text":"You can use any device supported by the netlab OSPF and VLAN configuration modules. The device should support VXLAN with static ingress replication.","title":"Device Requirements"},{"location":"vxlan/1-single/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to vxlan/1-single Execute netlab up Log into lab devices with netlab connect and verify that the IP addresses and the OSPF are properly configured.","title":"Start the Lab"},{"location":"vxlan/1-single/#existing-device-configuration","text":"The switches in your lab (S1 and S2) are preconfigured with a tenant VLAN with VLAN tag 100. IPv4 addresses are configured on Linux hosts, switch loopback interfaces, and the interswitch link ( details ). The switches run OSPF in area 0 across the interswitch link ( details ).","title":"Existing Device Configuration"},{"location":"vxlan/1-single/#configuration-tasks","text":"Configuring VXLAN on a switch is usually a multi-step process: Configure a VXLAN interface ( Vxlan1 on Arista EOS) and assign a local VTEP address (or source interface) to it. You\u2019ll use the loopback IPv4 address as the VTEP address. Optionally, set the VXLAN destination UDP port (the standard IANA-allocated VXLAN UDP port is 4789) To extend a VLAN across an underlay network with VXLAN, you have to: Map a local VLAN to a VXLAN Virtual Network Identifier (VNI) 1 . Arista EOS does the mapping within the VXLAN interface configuration. Configure a flood list (a list of remote VTEPs) for a VXLAN-enabled VLAN or VNI. The flood list is used to propagate copies of Ethernet BUM (Broadcast, Unknown unicast, Multicast) packets to all other VTEPs participating in the same VXLAN segment. The flood list is also configured within the VXLAN interface configuration on Arista EOS. The underlay network should be able to transport 1500-byte overlay IP packets. You should therefore increase the IP MTU size on the underlay links to at least 1550 bytes 2 due to VXLAN encapsulation overhead: 14 bytes for the Ethernet header 8 bytes for the VXLAN header 8 bytes for the UDP header 20 bytes for the outer IPv4 header","title":"Configuration Tasks"},{"location":"vxlan/1-single/#verification","text":"Try to ping h2 from h1: $ netlab connect h1 ping h2 Connecting to container clab-single-h1, executing ping h2 PING h2 (172.16.0.4): 56 data bytes 64 bytes from 172.16.0.4: seq=0 ttl=64 time=5.273 ms 64 bytes from 172.16.0.4: seq=1 ttl=64 time=2.048 ms ^C --- h2 ping statistics --- 2 packets transmitted, 2 packets received, 0% packet loss round-trip min/avg/max = 2.048/3.660/5.273 ms If that ping succeeds, try pinging with the 1500-byte IPv4 packets. The -s parameter of the Linux ping command specifies the payload size. The maximum payload that can fit into a 1500-byte packet is 1472 bytes due to the ICMP header (8 bytes) and the IP header (20 bytes). $ netlab connect h1 Connecting to container clab-single-h1, starting bash h1:/# ping h2 -s 1472 PING h2 (172.16.0.4): 1472 data bytes 1480 bytes from 172.16.0.4: seq=0 ttl=64 time=5.362 ms 1480 bytes from 172.16.0.4: seq=1 ttl=64 time=2.604 ms 1480 bytes from 172.16.0.4: seq=2 ttl=64 time=2.563 ms ^C --- h2 ping statistics --- 3 packets transmitted, 3 packets received, 0% packet loss round-trip min/avg/max = 2.563/3.509/5.362 ms You forgot to change the MTU size on the underlay links if the simple ping succeeds, but the large-packet ping fails. Done? Continue to More Complex VXLAN Deployment Scenario .","title":"Verification"},{"location":"vxlan/1-single/#tshoot","text":"Use these troubleshooting steps if the Linux host can\u2019t communicate over the stretched VLAN segment: Note The troubleshooting instructions use Arista EOS show commands and corresponding printouts. You\u2019ll have to find matching commands if you use some other platform. Verify OSPF connectivity between S1 and S2: s1#show ip ospf neighbor Neighbor ID Instance VRF Pri State Dead Time Address Interface 10.0.0.2 1 default 0 FULL 00:00:38 10.1.0.2 Ethernet1 Verify that S1 and S2 have routes to both loopback interfaces in their routing tables s1#show ip route ... Gateway of last resort is not set C 10.0.0.1/32 directly connected, Loopback0 O 10.0.0.2/32 [110/20] via 10.1.0.2, Ethernet1 C 10.1.0.0/30 directly connected, Ethernet1 Verify that S1 and S2 can ping each other\u2019s loopback interfaces from the source IPv4 address of the local loopback interface : s1#ping 10.0.0.2 source 10.0.0.1 PING 10.0.0.2 (10.0.0.2) from 10.0.0.1 : 72(100) bytes of data. 80 bytes from 10.0.0.2: icmp_seq=1 ttl=64 time=0.096 ms 80 bytes from 10.0.0.2: icmp_seq=2 ttl=64 time=0.007 ms 80 bytes from 10.0.0.2: icmp_seq=3 ttl=64 time=0.004 ms 80 bytes from 10.0.0.2: icmp_seq=4 ttl=64 time=0.005 ms 80 bytes from 10.0.0.2: icmp_seq=5 ttl=64 time=0.009 ms --- 10.0.0.2 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 0.004/0.024/0.096/0.035 ms, ipg/ewma 0.038/0.059 ms If you have gotten this far, your underlay network works correctly. Next, let\u2019s check the VXLAN configuration: The show vxlan vni command displays VLAN-to-VXLAN mapping. Check that you correctly mapped VLAN 100 to a VXLAN VNI and used the same VNI on S1 and S2. s1#show vxlan vni VNI to VLAN Mapping for Vxlan1 VNI VLAN Source Interface 802.1Q Tag ------------ ---------- ------------ --------------- ---------- 100100 100 static Ethernet2 untagged Vxlan1 100 The show vxlan vtep command displays remote VTEPs (ingress replication flood list). Check that you configured the remote VTEP loopback IP address in the flood list for your VNI: s1#show vxlan vtep Remote VTEPS for Vxlan1: VTEP Tunnel Type(s) -------------- -------------- 10.0.0.2 unicast, flood Total number of remote VTEPS: 1 You can also use the show vxlan flood vtep command to display the same information in a slightly different format. s1#show vxlan flood vtep VXLAN Flood VTEP Table -------------------------------------------------------------------------------- VLANS Ip Address ----------------------------- ------------------------------------------------ 100 10.0.0.2 End-to-end VXLAN should work if all the above printouts seem correct. However, you might also want to check the VLAN ports with the show vlan command and the spanning tree status with the show spanning-tree command. s1#show vlan VLAN Name Status Ports ----- -------------------------------- --------- ------------------------------- 1 default active 100 tenant active Cpu, Et2, Vx1 s1#show spanning-tree MST0 Spanning tree enabled protocol mstp Root ID Priority 32768 Address 001c.73a5.db35 This bridge is the root Bridge ID Priority 32768 (priority 32768 sys-id-ext 0) Address 001c.73a5.db35 Hello Time 2.000 sec Max Age 20 sec Forward Delay 15 sec Interface Role State Cost Prio.Nbr Type ---------------- ---------- ---------- --------- -------- -------------------- Et2 designated forwarding 20000 128.2 P2p Edge Finally, the show vxlan address-table command displays MAC addresses learned from the incoming VXLAN packets, while the show mac address-table command displays MAC addresses learned from local interfaces and incoming VXLAN packets: s1#show vxlan address-table Vxlan Mac Address Table ---------------------------------------------------------------------- VLAN Mac Address Type Prt VTEP Moves Last Move ---- ----------- ---- --- ---- ----- --------- 100 aac1.ab87.58b8 DYNAMIC Vx1 10.0.0.2 1 0:00:05 ago Total Remote Mac Addresses for this criterion: 1 s1#show mac address-table Mac Address Table ------------------------------------------------------------------ Vlan Mac Address Type Ports Moves Last Move ---- ----------- ---- ----- ----- --------- 100 aac1.ab87.58b8 DYNAMIC Vx1 1 0:00:43 ago 100 aac1.abc4.959e DYNAMIC Et2 1 0:00:43 ago Total Mac Addresses for this criterion: 2 If everything else fails, read the Arista EOS VXLAN Troubleshooting Guidebook or the corresponding documentation for your platform. Figured out what you did wrong? Continue to More Complex VXLAN Deployment Scenario .","title":"Troubleshooting"},{"location":"vxlan/1-single/#cheating","text":"Shut down your lab with the netlab down command Start the lab from the solution.yml topology with the netlab up solution.yml command Explore the S1/S2 device configuration Remembered the commands to configure VXLAN? Practice them in the More Complex VXLAN Deployment Scenario exercise.","title":"Cheating"},{"location":"vxlan/1-single/#reference-information","text":"","title":"Reference Information"},{"location":"vxlan/1-single/#wiring","text":"Origin Device Origin Port Destination Device Destination Port s1 Ethernet1 s2 Ethernet1 h1 eth1 s1 Ethernet2 h2 eth1 s2 Ethernet2","title":"Lab Wiring"},{"location":"vxlan/1-single/#addr","text":"Node/Interface IPv4 Address IPv6 Address Description s1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 s1 -> s2 Ethernet2 [Access VLAN tenant] s1 -> h1 Vlan100 VLAN tenant (100) -> [h1,h2,s2] s2 10.0.0.2/32 Loopback Ethernet1 10.1.0.2/30 s2 -> s1 Ethernet2 [Access VLAN tenant] s2 -> h2 Vlan100 VLAN tenant (100) -> [h1,s1,h2] h1 eth1 172.16.0.3/24 h1 -> [s1,h2,s2] h2 eth1 172.16.0.4/24 h2 -> [h1,s1,s2]","title":"Lab Addressing"},{"location":"vxlan/1-single/#ospf","text":"Router Interface IPv4 Address Neighbor(s) s1 Loopback 10.0.0.1/32 Ethernet1 10.1.0.1/30 s2 s2 Loopback 10.0.0.2/32 Ethernet1 10.1.0.2/30 s1 The VNI must match across VTEPs; the local VLAN tag does not have to. \u21a9 Setting the IPv4 MTU on the underlay links to 1560 bytes is safer as it allows for one or two levels of VLAN tags in the encapsulated Ethernet frames. \u21a9","title":"OSPF Routing (Area 0)"},{"location":"vxlan/2-complex/","text":"More Complex VXLAN Deployment Scenario After finishing the Extend a Single VLAN Segment with VXLAN lab exercise, let\u2019s do a slightly more complex scenario: We\u2019re extending several VLANs across an underlay network; Some VLANs are not present on all switches; We\u2019re using different VLAN tags for the Red bridge domain 1 The lab exercise will help you clarify some key points about VXLAN technology: You can use many VLAN-to-VNI mappings on a single device While VLAN tags have local significance, VXLAN Network Identifiers (VNIs) have end-to-end significance 2 The VXLAN ingress replication list might have to be configured per VNI 3 Device Requirements You can use any device supported by the netlab OSPF and VLAN configuration modules. The device should support VXLAN with static ingress replication. The Linux hosts attached to the lab switches are implemented with containers; your netlab installation will thus have to include Docker and containerlab 4 . Start the Lab Assuming you already set up your lab infrastructure : Change directory to vxlan/2-complex Execute netlab up Log into lab devices with netlab connect and verify that the IP addresses and the OSPF are properly configured. Existing Device Configuration The switches in your lab (S1, S2, and S3) are preconfigured with red and blue VLANs. The VLANs use these VLAN tags: VLAN switch VLAN tag red S1 201 S2 202 S3 203 blue S1 101 S2 101 IPv4 addresses are configured on Linux hosts, switch loopback interfaces, and the interswitch link ( details ). The switches run OSPF in area 0 across the interswitch link ( details ). Configuration Tasks Using the commands you mastered in the Extend a Single VLAN Segment with VXLAN lab exercise, extend the blue VLAN between S1 and S2 and the red VLAN between S1, S2, and S3 using these VNIs: VLAN VNI red 1000 blue 1001 Configure only the remote VTEPs participating in a VXLAN segment in the per-VNI ingress replication list (assuming your device supports per-VNI ingress replication lists). Verification Ping HR2 and HR3 from HR1 using a command similar to netlab connect hr1 ping hr2 Ping HB2 from HB1 Use the troubleshooting hints from the previous lab exercise if you can\u2019t establish end-to-end connectivity. Cheating Shut down your lab with the netlab down command Start the lab from the solution.yml topology with the netlab up solution.yml command Explore the device configurations Reference Information Lab Wiring Origin Device Origin Port Destination Device Destination Port s1 Ethernet1 s2 Ethernet1 s2 Ethernet2 s3 Ethernet1 s3 Ethernet2 s1 Ethernet2 s1 Ethernet3 hr1 eth1 s2 Ethernet3 hr2 eth1 s3 Ethernet3 hr3 eth1 s1 Ethernet4 hb1 eth1 s2 Ethernet4 hb2 eth1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description s1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 s1 -> s2 Ethernet2 10.1.0.9/30 s1 -> s3 Ethernet3 [Access VLAN red] s1 -> hr1 Ethernet4 [Access VLAN blue] s1 -> hb1 Vlan201 VLAN red (201) -> [hr1] Vlan101 VLAN blue (101) -> [hb1,hb2,s2] s2 10.0.0.2/32 Loopback Ethernet1 10.1.0.2/30 s2 -> s1 Ethernet2 10.1.0.5/30 s2 -> s3 Ethernet3 [Access VLAN red] s2 -> hr2 Ethernet4 [Access VLAN blue] s2 -> hb2 Vlan202 VLAN red (202) -> [hr2] Vlan101 VLAN blue (101) -> [hb1,s1,hb2] s3 10.0.0.3/32 Loopback Ethernet1 10.1.0.6/30 s3 -> s2 Ethernet2 10.1.0.10/30 s3 -> s1 Ethernet3 [Access VLAN red] s3 -> hr3 Vlan203 VLAN red (203) -> [hr3] hr1 eth1 172.16.0.4/24 hr1 -> [s1] hr2 eth1 172.16.0.5/24 hr2 -> [s2] hr3 eth1 172.16.0.6/24 hr3 -> [s3] hb1 eth1 172.16.1.7/24 hb1 -> [s1,hb2,s2] hb2 eth1 172.16.1.8/24 hb2 -> [hb1,s1,s2] OSPF Routing (Area 0) Router Interface IPv4 Address Neighbor(s) s1 Loopback 10.0.0.1/32 Ethernet1 10.1.0.1/30 s2 Ethernet2 10.1.0.9/30 s3 s2 Loopback 10.0.0.2/32 Ethernet1 10.1.0.2/30 s1 Ethernet2 10.1.0.5/30 s3 s3 Loopback 10.0.0.3/32 Ethernet1 10.1.0.6/30 s2 Ethernet2 10.1.0.10/30 s1 Using different (per-switch) VLAN tags for the same bridge domain is confusing and thus usually not a good idea, but you could easily encounter this challenge in migration/merger scenarios. \u21a9 Theoretically, you could reuse a VNI for multiple bridge domains (as long as they are not used on the same device), but there\u2019s no good reason to do that considering the 24-bit address space. Always use globally-unique VNIs. \u21a9 Configuring an excessive ingress replication list on a VXLAN ingress switch will not break the network; it will \u201conly\u201d waste bandwidth. \u21a9 Use the netlab install containerlab command on Ubuntu/Debian to install them. \u21a9","title":"More Complex VXLAN Deployment Scenario"},{"location":"vxlan/2-complex/#more-complex-vxlan-deployment-scenario","text":"After finishing the Extend a Single VLAN Segment with VXLAN lab exercise, let\u2019s do a slightly more complex scenario: We\u2019re extending several VLANs across an underlay network; Some VLANs are not present on all switches; We\u2019re using different VLAN tags for the Red bridge domain 1 The lab exercise will help you clarify some key points about VXLAN technology: You can use many VLAN-to-VNI mappings on a single device While VLAN tags have local significance, VXLAN Network Identifiers (VNIs) have end-to-end significance 2 The VXLAN ingress replication list might have to be configured per VNI 3","title":"More Complex VXLAN Deployment Scenario"},{"location":"vxlan/2-complex/#req","text":"You can use any device supported by the netlab OSPF and VLAN configuration modules. The device should support VXLAN with static ingress replication. The Linux hosts attached to the lab switches are implemented with containers; your netlab installation will thus have to include Docker and containerlab 4 .","title":"Device Requirements"},{"location":"vxlan/2-complex/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to vxlan/2-complex Execute netlab up Log into lab devices with netlab connect and verify that the IP addresses and the OSPF are properly configured.","title":"Start the Lab"},{"location":"vxlan/2-complex/#existing-device-configuration","text":"The switches in your lab (S1, S2, and S3) are preconfigured with red and blue VLANs. The VLANs use these VLAN tags: VLAN switch VLAN tag red S1 201 S2 202 S3 203 blue S1 101 S2 101 IPv4 addresses are configured on Linux hosts, switch loopback interfaces, and the interswitch link ( details ). The switches run OSPF in area 0 across the interswitch link ( details ).","title":"Existing Device Configuration"},{"location":"vxlan/2-complex/#configuration-tasks","text":"Using the commands you mastered in the Extend a Single VLAN Segment with VXLAN lab exercise, extend the blue VLAN between S1 and S2 and the red VLAN between S1, S2, and S3 using these VNIs: VLAN VNI red 1000 blue 1001 Configure only the remote VTEPs participating in a VXLAN segment in the per-VNI ingress replication list (assuming your device supports per-VNI ingress replication lists).","title":"Configuration Tasks"},{"location":"vxlan/2-complex/#verification","text":"Ping HR2 and HR3 from HR1 using a command similar to netlab connect hr1 ping hr2 Ping HB2 from HB1 Use the troubleshooting hints from the previous lab exercise if you can\u2019t establish end-to-end connectivity.","title":"Verification"},{"location":"vxlan/2-complex/#cheating","text":"Shut down your lab with the netlab down command Start the lab from the solution.yml topology with the netlab up solution.yml command Explore the device configurations","title":"Cheating"},{"location":"vxlan/2-complex/#reference-information","text":"","title":"Reference Information"},{"location":"vxlan/2-complex/#wiring","text":"Origin Device Origin Port Destination Device Destination Port s1 Ethernet1 s2 Ethernet1 s2 Ethernet2 s3 Ethernet1 s3 Ethernet2 s1 Ethernet2 s1 Ethernet3 hr1 eth1 s2 Ethernet3 hr2 eth1 s3 Ethernet3 hr3 eth1 s1 Ethernet4 hb1 eth1 s2 Ethernet4 hb2 eth1","title":"Lab Wiring"},{"location":"vxlan/2-complex/#addr","text":"Node/Interface IPv4 Address IPv6 Address Description s1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 s1 -> s2 Ethernet2 10.1.0.9/30 s1 -> s3 Ethernet3 [Access VLAN red] s1 -> hr1 Ethernet4 [Access VLAN blue] s1 -> hb1 Vlan201 VLAN red (201) -> [hr1] Vlan101 VLAN blue (101) -> [hb1,hb2,s2] s2 10.0.0.2/32 Loopback Ethernet1 10.1.0.2/30 s2 -> s1 Ethernet2 10.1.0.5/30 s2 -> s3 Ethernet3 [Access VLAN red] s2 -> hr2 Ethernet4 [Access VLAN blue] s2 -> hb2 Vlan202 VLAN red (202) -> [hr2] Vlan101 VLAN blue (101) -> [hb1,s1,hb2] s3 10.0.0.3/32 Loopback Ethernet1 10.1.0.6/30 s3 -> s2 Ethernet2 10.1.0.10/30 s3 -> s1 Ethernet3 [Access VLAN red] s3 -> hr3 Vlan203 VLAN red (203) -> [hr3] hr1 eth1 172.16.0.4/24 hr1 -> [s1] hr2 eth1 172.16.0.5/24 hr2 -> [s2] hr3 eth1 172.16.0.6/24 hr3 -> [s3] hb1 eth1 172.16.1.7/24 hb1 -> [s1,hb2,s2] hb2 eth1 172.16.1.8/24 hb2 -> [hb1,s1,s2]","title":"Lab Addressing"},{"location":"vxlan/2-complex/#ospf","text":"Router Interface IPv4 Address Neighbor(s) s1 Loopback 10.0.0.1/32 Ethernet1 10.1.0.1/30 s2 Ethernet2 10.1.0.9/30 s3 s2 Loopback 10.0.0.2/32 Ethernet1 10.1.0.2/30 s1 Ethernet2 10.1.0.5/30 s3 s3 Loopback 10.0.0.3/32 Ethernet1 10.1.0.6/30 s2 Ethernet2 10.1.0.10/30 s1 Using different (per-switch) VLAN tags for the same bridge domain is confusing and thus usually not a good idea, but you could easily encounter this challenge in migration/merger scenarios. \u21a9 Theoretically, you could reuse a VNI for multiple bridge domains (as long as they are not used on the same device), but there\u2019s no good reason to do that considering the 24-bit address space. Always use globally-unique VNIs. \u21a9 Configuring an excessive ingress replication list on a VXLAN ingress switch will not break the network; it will \u201conly\u201d waste bandwidth. \u21a9 Use the netlab install containerlab command on Ubuntu/Debian to install them. \u21a9","title":"OSPF Routing (Area 0)"}]}